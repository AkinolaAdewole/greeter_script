Functions Can Return Functions
Recall that a function must always return a value. Whether the value is explicitly specified in a return 
statement (e.g., returning a string, boolean, array, etc.), or the function implicitly returns 
undefined (e.g., a function that simply logs something to the console), a function will always return just one value.

Since we know that functions are first-class functions, we can treat a function as a value and just as easily return a 
function from another function! A function that returns another function is known as higher-order function. Consider this example:

function alertThenReturn() {
  alert('Message 1!');

  return function () {
    alert('Message 2!');
  };
}
If alertThenReturn() is invoked in a browser, we'll first see an alert message that says 'Message 1!', 
followed by the alertThenReturn() function returning an anonymous function. However, we don't actually see an alert 
that says 'Message 2!', since none of the code from the inner function is executed. How do we go about executing the returned function?

Since alertThenReturn() returns that inner function, we can assign a variable to that return value:

const innerFunction = alertThenReturn();
We can then use the innerFunction variable like any other function!

innerFunction();

// alerts 'Message 2!'
Likewise, this function can be invoked immediately without being stored in a variable. We'll still get the same 
outcome if we simply add another set of parentheses to the expression alertThenReturn();:

alertThenReturn()();

// alerts 'Message 1!' then alerts 'Message 2!'
Notice the double set of parentheses (i.e. ()()) in that function call! The first pair of parentheses executes the 
alertThenReturn() function. The return value of this invocation is a function, which then gets invoked by the second pair of parentheses!