Array Loops
Array Loops
Once the data is in the array, you want to be able to efficiently access and manipulate each 
element in the array without writing repetitive code for each element.

For instance, if this was our original donuts array:

const donuts = ["jelly donut", "chocolate donut", "glazed donut"];
and we decided to make all the same donut types, but only sell them as donut holes instead, 
we could write the following code:

donuts[0] += " hole";
donuts[1] += " hole";
donuts[2] += " hole";
donuts array: ["jelly donut hole", "chocolate donut hole", "glazed donut hole"]

But remember, you have another powerful tool at your disposal, loops!

To loop through an array, you can use a variable to represent the index in the array and then loop over 
that index to perform whatever manipulations your heart desires.

const donuts = ["jelly donut", "chocolate donut", "glazed donut"];

// the variable `i` is used to step through each element in the array
for (let i = 0; i < donuts.length; i++) {
    donuts[i] += " hole";
    donuts[i] = donuts[i].toUpperCase();
}
donuts array: ["JELLY DONUT HOLE", "CHOCOLATE DONUT HOLE", "GLAZED DONUT HOLE"]

In this example, the variable i is being used to represent the index of the array. As i is incremented, 
you are stepping over each element in the array starting from 0 until donuts.length - 1 (donuts.length is out of bounds).




for Loop Review
The for loop should be familiar to you:

const donuts = ["jelly donut", "chocolate donut", "glazed donut"];

for (let i = 0; i < donuts.length; i++ ) {
  donuts[i] += " hole";
  donuts[i] = donuts[i].toUpperCase();
}

console.log(donuts); //  ['JELLY DONUT HOLE', 'CHOCOLATE DONUT HOLE', 'GLAZED DONUT HOLE'
Array Methods for Looping
Arrays have a set of special methods to help you iterate over and perform operations on collections of data. 
You can view the MDN Documentation list of Array methods, but a couple big ones to know are the forEach() and map() methods.

The forEach Method
The forEach() method gives you an alternative way to iterate over an array, and manipulate each element in the array with an 
inline function expression.

const donuts = ["jelly donut", "chocolate donut", "glazed donut"];

donuts.forEach(function(donut) {
  donut += " hole";
  donut = donut.toUpperCase();
  console.log(donut);
});
Prints:

JELLY DONUT HOLE

CHOCOLATE DONUT HOLE

GLAZED DONUT HOLE

Notice that the forEach() method iterates over the array without the need of an explicitly defined index. 
In the example above, donut corresponds to the element in the array itself. This is different from a for or while loop where an 
index is used to access each element in the array:

for (let i = 0; i < donuts.length; i++) {
  donuts[i] += " hole";
  donuts[i] = donuts[i].toUpperCase();
  console.log(donuts[i]);
}
forEach Syntax
The function that you pass to the forEach() method can take up to three parameters. We have named them element, index, and array, 
but you can name them whatever you like.

const myArray = ["A", "B", "C", "D"];

function myAwesomeFunction(element, index, array) {
  console.log("Element: ", element);
  console.log("Index: ", index);
  console.log("Array: ", array);
}

myArray.forEach(myAwesomeFunction);
The forEach() method will call this function once for each element in the array (hence the name forEach.) Each time, it will call 
the function with different arguments. The element parameter will get the value of the array element. The index parameter will 
get the index of the element (starting with zero). The array parameter will get a reference to the whole array, which is handy 
if you want to modify the elements.

Here's another example:

words = ["cat", "in", "hat"];
words.forEach(function(word, num, all) {
  console.log("Word " + num + " in " + all.toString() + " is " + word);
});
Prints:
Word 0 in cat,in,hat is cat
Word 1 in cat,in,hat is in
Word 2 in cat,in,hat is hat

On the next page, you'll do a quiz that uses the forEach() method to modify an array.

